"""
- perform the ctypes conversion to call codingLib dynamic library in c++
- inspect the coding functions whether being performed correctly or not by
feeding a sample burst input and check the result (uppMac_str). 
"""
from ctypes import *
import numpy as np

#std::vector<uint8_t> ptrVec(std::uint8_t* ptr, int size) 

lib = cdll.LoadLibrary('/home/ctn008/tetraDMO-Receiver/codec/tetraChDecoderLib.so') # class level loading lib

# C-type corresponding to numpy array 
ND_POINTER = np.ctypeslib.ndpointer(dtype=np.int16, 
                                      ndim=1,
                                      flags="C")
def Channel_Decoding(first_pass, Frame_stealing, Input_Frame, Output_Frame):
    lib.Channel_Decoding.argtypes = [c_int16, c_int16, ND_POINTER, ND_POINTER]
    lib.Channel_Decoding.restype = c_int16
    res = lib.Channel_Decoding(first_pass, Frame_stealing, Input_Frame, Output_Frame)
    return res

def Desinterleaving_Signalling(Input_Frame, Output_Frame):
    lib.Desinterleaving_Signalling.argtypes = [ND_POINTER, ND_POINTER]
    lib.Desinterleaving_Signalling.restype = c_int16
    res = lib.Desinterleaving_Signalling(Input_Frame, Output_Frame)
    return res

def Desinterleaving_Speech(Input_Frame, Output_Frame):
    lib.Desinterleaving_Speech.argtypes = [ND_POINTER, ND_POINTER]
    lib.Desinterleaving_Speech.restype = c_int16
    res = lib.Desinterleaving_Speech(Input_Frame, Output_Frame)
    return res

"""def Read_Tetra_File(file_pointer,buffer):    
    lib.Read_Tetra_File.argtypes = [ND_POINTER, ND_POINTER]
    lib.Read_Tetra_File(file_pointer,buffer)
"""

Loop_counter = 0
first_pass = True
Frame_stealing = False
bfi1 = 0
bfi2 = 0
Reordered_array         = np.array([0]*286, dtype = 'int16')
Interleaved_coded_array = np.array([0]*432, dtype = 'int16')
Coded_array             = np.array([0]*432, dtype = 'int16')


u_plane16_1 = '111101100001001110110001111101100111000010100001111111000011000000000001111111000101001010100000001010100100000110110001001010000110001011110001110001010111110101000001110001010010111100010000011111100001001010100000011111000110100101000011011101010001010110110011011101000101001000000010110100000110000110110001110100000000100101000000100100010111110000100001100100001100011101100011101100001010011011110011101100000110100110110001'
u_plane17_1 = '001101110011011010011000110101011000000110101000001101101011011000000000101101000111101110101000001101111100000010011001100101101011001000111001001110001010001010100001100110001101110100110001010010110011111110101001011010000110101101010000010110000100000101101000111110000111101111110000010111010110001010011010110111010000010010100010000010000010111001100010010111010110011100110010011010000000000000111000001010010111011101101010'

first_pass = False
for i in range(432):
    # "0" = 127, "1" = -127
    Interleaved_coded_array[i] = 127 if u_plane16_1[i] == '0' else -127
    
Desinterleaving_Speech(Interleaved_coded_array, Coded_array)
bfi2 = Channel_Decoding(first_pass, Frame_stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech frame 16_1: ", bfi2)

for i in range(432):
    Interleaved_coded_array[i] = 127 if u_plane17_1[i] == '0' else -127
    
Desinterleaving_Speech(Interleaved_coded_array, Coded_array)
bfi2 = Channel_Decoding(first_pass, Frame_stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech frame 17_1: ", bfi2)

input("Press anykey to continue.")

in_frame =[0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, ]

out_frame=[ 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81]
out_frame1= [0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]

for i in range(432):
    Interleaved_coded_array[i] = np.int16(in_frame[i])

Desinterleaving_Speech(Interleaved_coded_array, Coded_array)

for i in range(432):
    if Coded_array[i] != np.int16(out_frame[i]):
        print("difference at i= ", i)
print("completed comparing outputs")

input("Press anykey to continue.")

for i in range(432):
    Coded_array[i] = np.int16(out_frame[i])

bfi2 = Channel_Decoding(first_pass, Frame_stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech out_frame: BFI= ", bfi2)

for i in range(432):
    Coded_array[i] = np.int16(out_frame1[i])

bfi2 = Channel_Decoding(first_pass, Frame_stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech out_frame1: BFI= ", bfi2)

#*** TEST CHANNEL DECODING FROM .OUT FILE
print("TEST CHANNEL CODING FROM .OUT FILE. \nPress Any Key to start.")
input()

fileNout = '/home/ctn008/tetraDMO-Receiver/codec/tetraDMO_01.out'
fileNcod = '/home/ctn008/tetraDMO-Receiver/codec/tetraDMO_01GEN.cod'

sig_out = np.fromfile(fileNout, dtype = 'int16')
sig_cod = np.array([0]*( (len(sig_out)//690) + 1 ) * 276, dtype = 'int16')

Loop_counter = 0
first_pass = True
Frame_stealing = False
bfi1 = 0
bfi2 = 0
Reordered_array         = np.array([0]*286, dtype = 'int16')
Interleaved_coded_array = np.array([0]*432, dtype = 'int16')
Coded_array             = np.array([0]*432, dtype = 'int16')

out_ptr = 0
cod_ptr = 0
OUT_FRAME = 690

while out_ptr + OUT_FRAME <= len(sig_out):

    #Read_Tetra_File(sig_out[out_ptr:], Interleaved_coded_array)
    if sig_out[out_ptr] != 0x6b21:
        print("no correct format")
        break

    #/* Copy first valid block */
    block_ptr = 1
    array_ptr = 0
    for i in range(114) :
        Interleaved_coded_array[array_ptr + i] = sig_out[out_ptr + block_ptr + i]

    #/* Copy second valid block */
    block_ptr = 161 - 45
    array_ptr += 114
    for i in range(114) :
        Interleaved_coded_array[array_ptr + i] = sig_out[out_ptr + block_ptr + i]

    #/* Copy third valid block */

    block_ptr = 321 - 45 - 45
    array_ptr += 114
    for i in range(114) :
        Interleaved_coded_array[array_ptr + i] = sig_out[out_ptr + block_ptr + i]

    #/* Copy fourth valid block */
    block_ptr = 481 - 45 - 45 - 45
    array_ptr += 114
    for i in range(90) :
        Interleaved_coded_array[array_ptr + i] = sig_out[out_ptr + block_ptr + i]

    for i in range(432) :
        if (Interleaved_coded_array[i] & 0x0080) == 0x0080 :
            Interleaved_coded_array[i] = Interleaved_coded_array[i] | 0xFF00
        if ((Interleaved_coded_array[i] > 127) or (Interleaved_coded_array[i] < -127 )):
            print("Input soft bit out of range")
    
    out_ptr += OUT_FRAME
    
    if Frame_stealing:
        Desinterleaving_Speech(Interleaved_coded_array[216:], Coded_array[216:])
        Coded_array[0:216] = Interleaved_coded_array[0:216]
    else:
        Desinterleaving_Speech(Interleaved_coded_array, Coded_array)

    bfi1 = Frame_stealing
    if bfi1 :
        print(f"Frame Nb %d was stolen" %(Loop_counter+1))
    bfi2 = Channel_Decoding(first_pass, Frame_stealing, Coded_array, Reordered_array)
    first_pass = False

    if (Frame_stealing == 0) and (bfi2==1) :
        bfi1 = 1

    Loop_counter +=1
    if bfi2 :
        print(f"Frame Nb %d Bfi active" %(Loop_counter+1))

    sig_cod[cod_ptr] = bfi1
    cod_ptr +=1
    sig_cod[cod_ptr:cod_ptr+137] = Reordered_array[0:137]
    cod_ptr += 137
    sig_cod[cod_ptr] = bfi2
    cod_ptr +=1
    sig_cod[cod_ptr:cod_ptr+137] = Reordered_array[137:137+137]
    cod_ptr += 137

    #DEBUG print("Loop no: ", Loop_counter, "   Press any key to next loop.")
    #DEBUG input()

sig_cod.tofile(fileNcod)



