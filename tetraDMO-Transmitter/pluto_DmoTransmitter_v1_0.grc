options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: pluto_DmoTransmitter_v1_0
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: pluto_DmoTransmitter_v1_0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: audio_rate
  id: variable
  parameters:
    comment: ''
    value: '8000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: decim
  id: variable
  parameters:
    comment: ''
    value: '9'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 516.0]
    rotation: 0
    state: enabled
- name: freq_adjust
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-7000'
    step: '10'
    stop: '7000'
    value: '4000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 516.0]
    rotation: 0
    state: enabled
- name: frequency_hz
  id: variable_qtgui_entry
  parameters:
    comment: ''
    gui_hint: '[1,0]'
    label: Frequency [Hz]
    type: real
    value: '390000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 508.0]
    rotation: 0
    state: enabled
- name: num_tap
  id: variable
  parameters:
    comment: ''
    value: '11'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 516.0]
    rotation: 0
    state: enabled
- name: ptt_on
  id: variable_qtgui_push_button
  parameters:
    comment: ''
    gui_hint: ''
    label: Push_To_Talk
    pressed: '1'
    released: '0'
    type: bool
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 4.0]
    rotation: 0
    state: enabled
- name: samp_per_symbol
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 516.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 80000*decim
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 516.0]
    rotation: 0
    state: enabled
- name: showTxt
  id: variable_qtgui_toggle_switch
  parameters:
    cellalignment: '1'
    comment: ''
    gui_hint: ''
    initPressed: 'False'
    label: showText
    outputmsgname: value
    position: '4'
    pressed: '1'
    released: '0'
    switchOffBackground: gray
    switchOnBackground: green
    type: bool
    value: '0'
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 4.0]
    rotation: 0
    state: disabled
- name: symbol_rate
  id: variable
  parameters:
    comment: ''
    value: '18000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 516.0]
    rotation: 0
    state: enabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: audio_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 300.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 140.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Block: tetraDmoEncoder\n\nperform encoding\
      \ Dmo tetra signal\n- input: 432 byte frames voice signal one per 4 time slot\
      \ per 17 frame\n- output 510 byte tetra burst signal, 4 per frame per 18 frame\n\
      \"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\nfrom ctypes import *\n\
      import pmt\n\nclass DmoEncoder(gr.basic_block):\n\n    MacEncoderLib = cdll.LoadLibrary('/home/ctn008/tetraDMO-Transmitter/libs/MacEncoderLib_v1.so')\n\
      \    ND_POINTER = np.ctypeslib.ndpointer(dtype=np.uint8, \n                \
      \                              ndim=1,\n                                   \
      \           flags=\"C\")\n    def Init_serviceMacEncode(show_txt, talkgroup_id,\
      \ radio_id):\n        DmoEncoder.MacEncoderLib.Init_serviceMacEncode.argtypes\
      \ = [c_bool, c_size_t, c_size_t]\n        DmoEncoder.MacEncoderLib.Init_serviceMacEncode(show_txt,\
      \ talkgroup_id, radio_id)\n      \n    def serviceMacEncode(showTxt, ptt, talkgroup_id,\
      \ radio_id, in_data, in_len, out_data, out_envelop):\n        DmoEncoder.MacEncoderLib.serviceMacEncode.argtypes\
      \ = [c_bool, c_bool, c_size_t, c_size_t, DmoEncoder.ND_POINTER, c_size_t, DmoEncoder.ND_POINTER,\
      \ DmoEncoder.ND_POINTER]\n        DmoEncoder.MacEncoderLib.serviceMacEncode.restype\
      \ = c_size_t\n        res = DmoEncoder.MacEncoderLib.serviceMacEncode(showTxt,\
      \ ptt, talkgroup_id, radio_id, in_data, in_len, out_data, out_envelop)\n   \
      \     return res\n    \n    def __init__(self, show_txt=True, talkgroup_id =\
      \ 1001, radio_id =6081751, ptt = False):\n        gr.basic_block.__init__(\n\
      \            self,\n            name='TetraDMO Encoder',\n            in_sig=[np.uint8],\n\
      \            out_sig=[np.uint8, np.uint8]\n        )\n        self.showTxt \
      \       = show_txt\n        self.prev_showTxt    = False\n        self.update_showTxt\
      \ = False\n        self.talkgroupId    = talkgroup_id\n        self.radioId\
      \        = radio_id\n        self.ptt            = ptt\n        self.prev_ptt\
      \       = False\n        self.update_ptt     = False\n\n        self.message_port_register_in(pmt.intern('ptt'))\n\
      \        self.set_msg_handler(pmt.intern('ptt'), self.handle_msg)\n\n      \
      \  self.message_port_register_out(pmt.intern('tx_keyed'))\n        self.tx_keyed_status\
      \ = pmt.cons( pmt.intern('tx_keyed'), pmt.from_bool(False) )\n\n    def handle_msg(self,\
      \ msg):\n        # rotate curChannel + 1\n        #self.ptt = True       \n\
      \        print(msg)\n        \n    def general_work(self, input_items, output_items):\n\
      \        if self.showTxt != self.prev_showTxt:\n            self.prev_showTxt\
      \ = self.showTxt\n            self.update_showTxt = True\n        if self.update_showTxt:\n\
      \            self.update_showTxt = False\n            print(\"showTxt = \",\
      \ self.ptt)\n        \n        in_len  = len(input_items[0])\n        out_len\
      \ = len(output_items[0])\n        in_ptr = 0\n        out_ptr = 0\n\n      \
      \  in_ptr  = in_len if (out_len*2-255) >= (in_len*5) else (out_len*2-255)//5\n\
      \        out_ptr = DmoEncoder.serviceMacEncode(self.showTxt, self.ptt, self.talkgroupId,\
      \ self.radioId, input_items[0], in_ptr, output_items[0], output_items[1])\n\n\
      \        self.consume(0, in_ptr)\n        return out_ptr\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    ptt: ptt_on
    radio_id: '6081751'
    show_txt: 'False'
    talkgroup_id: '1001'
  states:
    _io_cache: ('TetraDMO Encoder', 'DmoEncoder', [('show_txt', 'True'), ('talkgroup_id',
      '1001'), ('radio_id', '6081751'), ('ptt', 'False')], [('0', 'byte', 1), ('ptt',
      'message', 1)], [('0', 'byte', 1), ('1', 'byte', 1), ('tx_keyed', 'message',
      1)], '', ['ptt'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 288.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\nsync block, 480 samples in, 480\
      \ samples out\n\"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\nfrom ctypes\
      \ import *\n\nIN_STEP = 480\nOUT_STEP = 432\nL_FRAME     = 240\nSERIAL_SIZE\
      \ = 138\nANA_SIZE    =  23\n\nclass SrcChCoder(gr.basic_block):\n    SrcCoderlib\
      \ = cdll.LoadLibrary('/home/ctn008/tetraDMO-Transmitter/libs/tetraSrcCoderLib.so')\n\
      \n    # C-type corresponding to numpy array \n    ND_POINTER = np.ctypeslib.ndpointer(dtype=np.int16,\
      \ \n                                          ndim=1,\n                    \
      \                      flags=\"C\")\n    SrcCoderlib.Pre_Process.argtypes =\
      \ [ND_POINTER, c_int16]\n    SrcCoderlib.Prm2bits_Tetra.argtypes = [ND_POINTER,\
      \ ND_POINTER]\n    SrcCoderlib.Coder_Tetra.argtypes    = [ND_POINTER, ND_POINTER]\n\
      \    SrcCoderlib.Post_Process.argtypes   = [ND_POINTER, c_int16]\n\n    SrcCoderlib.Copy_Speech_Frame.argtypes\
      \   = [ND_POINTER]\n    def Copy_Speech_Frame(speech_frame):\n        SrcChCoder.SrcCoderlib.Copy_Speech_Frame(speech_frame)\n\
      \n    def Init_Pre_Process():\n        SrcChCoder.SrcCoderlib.Init_Pre_Process()\n\
      \n    def Init_Coder_Tetra():\n        SrcChCoder.SrcCoderlib.Init_Coder_Tetra()\n\
      \        \n    def Pre_Process(new_speech, L_frame):\n        SrcChCoder.SrcCoderlib.Pre_Process(new_speech,\
      \ L_frame)\n\n    def Prm2bits_Tetra(ana, serial):\n        SrcChCoder.SrcCoderlib.Prm2bits_Tetra(ana,\
      \ serial)\n\n    def Coder_Tetra(ana, syn):\n        SrcChCoder.SrcCoderlib.Coder_Tetra(ana,\
      \ syn)\n\n    def Post_Process(synth, L_frame):    \n        SrcChCoder.SrcCoderlib.Post_Process(synth,\
      \ L_frame)\n\n    ChCoderlib = cdll.LoadLibrary('/home/ctn008/tetraDMO-Transmitter/libs/tetraChCoderLib.so')\n\
      \n    ChCoderlib.Channel_Encoding.argtypes    = [c_int16, c_int16, ND_POINTER,\
      \ ND_POINTER]\n    ChCoderlib.Interleaving_Signalling.argtypes = [ND_POINTER,\
      \ ND_POINTER]\n    ChCoderlib.Interleaving_Signalling.restype  = c_int16\n \
      \   ChCoderlib.Interleaving_Speech.argtypes     = [ND_POINTER, ND_POINTER]\n\
      \    ChCoderlib.Interleaving_Speech.restype      = c_int16\n\n    def Channel_Encoding(first_pass,\
      \ FS_Flag, Vocod_array, Coded_array):\n        SrcChCoder.ChCoderlib.Channel_Encoding(first_pass,FS_Flag,Vocod_array,Coded_array)\n\
      \n    def Interleaving_Signalling( Input_Frame, Output_frame ):\n        return\
      \ SrcChCoder.ChCoderlib.Interleaving_Signalling( Input_Frame, Output_frame )\n\
      \n    def Interleaving_Speech( Input_Frame, Output_frame ):\n        return\
      \ SrcChCoder.ChCoderlib.Interleaving_Speech( Input_Frame, Output_frame )\n \
      \   \n    def __init__(self, mic_gain = 1):\n        gr.basic_block.__init__(\n\
      \            self,\n            name='Tetra Voice Coder',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.uint8]\n  \
      \      )\n        self.mic_gain = mic_gain\n        \n        self.syn    =\
      \ np.array([0]*L_FRAME,     dtype = 'int16')\n        self.ana    = np.array([0]*ANA_SIZE,\
      \    dtype = 'int16')    #/* Analysis parameters.   */\n        self.serial\
      \ = np.array([0]*SERIAL_SIZE, dtype = 'int16') #/* Serial stream.         */\n\
      \n        self.Loop_counter = 0\n        self.first_pass = True\n        self.FS_Flag\
      \ = False\n        self.Vocod_array         = np.array([0]*274, dtype = 'int16')\n\
      \        self.Coded_array             = np.array([0]*432, dtype = 'int16')\n\
      \        self.Interleaved_coded_array = np.array([0]*432, dtype = 'int16')\n\
      \n        SrcChCoder.Init_Pre_Process()\n        SrcChCoder.Init_Coder_Tetra()\n\
      \     \n    def general_work(self, input_items, output_items):\n        in_index\
      \ = 0\n        out_index = 0\n\n        frame = 0\n\n        while (len(input_items[0])\
      \ >= in_index + IN_STEP) and (len(output_items[0]) >= out_index + OUT_STEP)\
      \ :\n            # multiply 32768 to convert from floating to int16\n      \
      \      new_speech = np.array(input_items[0][in_index:in_index+480]*32768 * self.mic_gain,\
      \ dtype = 'int16')\n            # process 1st 240 samples\n            SrcChCoder.Pre_Process(new_speech,\
      \ L_FRAME)\n            SrcChCoder.Copy_Speech_Frame(new_speech)    # copy to\
      \ c global 'new_speech' pointer\n            SrcChCoder.Coder_Tetra(self.ana,\
      \ self.syn)\n            SrcChCoder.Post_Process(self.syn, L_FRAME)\n      \
      \      SrcChCoder.Prm2bits_Tetra(self.ana, self.serial)\n            self.Vocod_array[\
      \  0:137] = self.serial[1:SERIAL_SIZE]\n            \n            # process\
      \ next 240 samples\n            SrcChCoder.Pre_Process(new_speech[240:], L_FRAME)\n\
      \            SrcChCoder.Copy_Speech_Frame(new_speech[240:])    # copy to c global\
      \ 'new_speech' pointer\n            SrcChCoder.Coder_Tetra(self.ana, self.syn)\n\
      \            SrcChCoder.Post_Process(self.syn, L_FRAME)\n            SrcChCoder.Prm2bits_Tetra(self.ana,\
      \ self.serial)\n            self.Vocod_array[137:274] = self.serial[1:SERIAL_SIZE]\n\
      \n            SrcChCoder.Channel_Encoding(self.first_pass, self.FS_Flag, self.Vocod_array,\
      \ self.Coded_array)\n            self.first_pass = False\n\n            if (not\
      \ self.FS_Flag):\n                SrcChCoder.Interleaving_Speech(self.Coded_array,\
      \ self.Interleaved_coded_array)\n            else:\n                SrcChCoder.Interleaving_Signalling(\
      \ self.Coded_array[216:], self.Interleaved_coded_array[216:] )\n           \
      \     self.Interleaved_coded_array[0:216] = self.Coded_array[0:216]\n      \
      \          print(\"FS_Flag ON\")\n                    \n            self.Loop_counter\
      \ += 1\n\n            if type(output_items[0][0]) == np.int16:\n           \
      \     output_items[0][out_index:out_index+432] = self.Interleaved_coded_array\n\
      \            else: #uint8\n                for i in range(432):\n          \
      \          output_items[0][out_index+i] = 0 if (self.Interleaved_coded_array[i]\
      \ == 127) else 1\n\n            in_index += IN_STEP\n            out_index +=\
      \ OUT_STEP\n            \n        self.consume(0, in_index)\n        return\
      \ out_index\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    mic_gain: '4'
    minoutbuf: '0'
  states:
    _io_cache: ('Tetra Voice Coder', 'SrcChCoder', [('mic_gain', '1')], [('0', 'float',
      1)], [('0', 'byte', 1)], '', ['mic_gain'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 300.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass Pi4DQPSK(gr.interp_block):\n    # Create our\
      \ raised-cosine filter\n    num_taps = 11 * 2 + 1\n    beta = 0.35\n    Ts =\
      \ 2\n    t = np.arange(num_taps) - (num_taps-1) // 2\n    h = np.sinc(t/Ts)\
      \ * np.cos(np.pi*beta*t/Ts) / (1 - (2*beta*t/Ts)**2)\n    preConvI = np.array([0]\
      \ * 22, dtype = 'float32')\n    preConvQ = np.array([0] * 22, dtype = 'float32')\n\
      \    \n    def __init__(self, envelope_in = False):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.interp_block.__init__(\n            self,\n            name='Pi4DQPSK\
      \ 18kDibit-to-36kIQk',   \t# will show up in GRC\n            in_sig=[np.uint8,\
      \ np.uint8,],\n            out_sig=[np.complex64], interp = 2\n        )\n \
      \       self.interp = 2        \n        self.cur_phase_index = \t0\t\t\t\t\
      # current phase index value S(0) = 1\n        self.envelope_in = envelope_in\n\
      \        \n    def work(self, input_items, output_items):\n        # Phase Index\
      \ Change Table: corresponding to current phase (row 0-7) and current dibit value\
      \ (column 0-3)\n        # B2k_1,B2k:   00 01 10 11\n            \n        phase_shift\
      \ = (1, 3, 7, 5)\n\n        # Phase value corresponding to Phase Index\n   \
      \     IQ_table = (( np.cos(np.pi/4 * 0) , np.sin(np.pi/4 * 0) ),\n         \
      \           ( np.cos(np.pi/4 * 1) , np.sin(np.pi/4 * 1) ),\n               \
      \     ( np.cos(np.pi/4 * 2) , np.sin(np.pi/4 * 2) ),\n                    (\
      \ np.cos(np.pi/4 * 3) , np.sin(np.pi/4 * 3) ),\n                    ( np.cos(np.pi/4\
      \ * 4) , np.sin(np.pi/4 * 4) ),\n                    ( np.cos(np.pi/4 * 5) ,\
      \ np.sin(np.pi/4 * 5) ),\n                    ( np.cos(np.pi/4 * 6) , np.sin(np.pi/4\
      \ * 6) ),\n                    ( np.cos(np.pi/4 * 7) , np.sin(np.pi/4 * 7) ))\n\
      \n        # perform rrc filter\n        tempI = np.array([0] * (len(input_items[0])\
      \ * 2), dtype='float32') # 22 = rrc_taps - 1\n        tempQ = np.array([0] *\
      \ (len(input_items[0]) * 2), dtype='float32') # 22 = rrc_taps - 1\n\n      \
      \  for i in range (0,len(input_items[0])):\n            if self.envelope_in:\n\
      \                input_dibit = input_items[0][i] & input_items[1][i]\n     \
      \       else:\n                input_dibit = input_items[0][i]\n           \
      \     \n            self.cur_phase_index += phase_shift[ input_dibit ]\n   \
      \         if self.cur_phase_index >= 8:\n                self.cur_phase_index\
      \ -= 8\n\n            if input_items[1][i] :\n                tempI[i*2] = IQ_table[\
      \ self.cur_phase_index ][0]\n                tempQ[i*2] = IQ_table[ self.cur_phase_index\
      \ ][1]\n\n        tempIconvolved = np.convolve(tempI, Pi4DQPSK.h) \n       \
      \ tempQconvolved = np.convolve(tempQ, Pi4DQPSK.h)\n        \n        for i in\
      \ range(len(Pi4DQPSK.h)-1):\n            tempIconvolved[i] += Pi4DQPSK.preConvI[i]\n\
      \            tempQconvolved[i] += Pi4DQPSK.preConvQ[i]\n\n        for i in range(len(Pi4DQPSK.h)-1):\n\
      \            Pi4DQPSK.preConvI[-i-1] = tempIconvolved[-i-1]\n            Pi4DQPSK.preConvQ[-i-1]\
      \ = tempQconvolved[-i-1]\n        for i in range(len(input_items[0])*2):\n \
      \           output_items[0][i] = tempIconvolved [i] + 1j*tempQconvolved[i]\n\
      \                                   \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    envelope_in: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Pi4DQPSK 18kDibit-to-36kIQk', 'Pi4DQPSK', [('envelope_in', 'False')],
      [('0', 'byte', 1), ('1', 'byte', 1)], [('0', 'complex', 1)], 'arguments to this
      function show up as parameters in GRC', ['envelope_in'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 816.0]
    rotation: 0
    state: enabled
- name: iio_pluto_sink_0
  id: iio_pluto_sink
  parameters:
    affinity: ''
    alias: ''
    attenuation1: '10'
    bandwidth: '2000000'
    buffer_size: int(32768)
    comment: ''
    cyclic: 'False'
    filter: ''
    filter_source: '''Auto'''
    fpass: '0'
    frequency: frequency_hz+freq_adjust
    fstop: '0'
    len_tag_key: ''
    samplerate: samp_rate
    type: fc32
    uri: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 804.0]
    rotation: 0
    state: enabled
- name: low_pass_filter_0_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: '25000'
    decim: '1'
    gain: decim/2
    interp: decim
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: interp_fir_filter_ccf
    width: '5000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 812.0]
    rotation: 0
    state: enabled
- name: mmse_resampler_xx_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: 36/80
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 832.0]
    rotation: 0
    state: enabled
- name: qtgui_ledindicator_0_0_1
  id: qtgui_ledindicator
  parameters:
    affinity: ''
    alias: ''
    cellalignment: '1'
    comment: ''
    gui_hint: 0,4
    label: Transmit
    maxSize: '40'
    offColor: gray
    onColor: green
    position: '1'
    state: ptt_on
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 4.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"FrameView - 2040 bit "'
    nconnections: '1'
    size: 2040*2
    srate: audio_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1216, 116.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: int(2*2040*720/36)
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.5'
    ymin: '-1.5'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 652.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_1_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: int(4*2040)
    srate: symbol_rate*2
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.5'
    ymin: '-1.5'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 716.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: s18kDibit
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 284.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: s18kDibit_envelop
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 340.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: s18kDibit
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 756.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: s18kDibit_envelop
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 844.0]
    rotation: 0
    state: enabled

connections:
- [audio_source_0, '0', epy_block_0_0, '0']
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_1, '0']
- [epy_block_0, '0', blocks_char_to_float_0, '0']
- [epy_block_0, '0', virtual_sink_0, '0']
- [epy_block_0, '1', virtual_sink_0_0, '0']
- [epy_block_0_0, '0', epy_block_0, '0']
- [epy_block_1, '0', mmse_resampler_xx_0, '0']
- [epy_block_1, '0', qtgui_time_sink_x_1_0_0, '0']
- [low_pass_filter_0_0, '0', iio_pluto_sink_0, '0']
- [low_pass_filter_0_0, '0', qtgui_time_sink_x_1_0, '0']
- [mmse_resampler_xx_0, '0', low_pass_filter_0_0, '0']
- [virtual_source_0, '0', epy_block_1, '0']
- [virtual_source_0_0, '0', epy_block_1, '1']

metadata:
  file_format: 1
